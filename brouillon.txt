





clicks get love



love is handled by the server


everyone can send love to the global love meter





heart in the middle of the screen 

lovemeter on top, loveshop at the bottom. loveshop for later.









two things. lovemeter and lovegenerator










client clicks and send the number of global clicks he did.


server compares that number with the previous he had. if > then update


server always returns to player the global_count - his clicks.



---------------------



server finds its own id : irnd(pow(10,8))

if id not taken then create pool in db

update every 15 seconds

when last client disconnects, force update of db

when done, get the server_pool to global_pool

delete server_pool




function init_server()
  
  db = {}
  
  server_meter = 0
  global_meter = 0
  server_key = 0
  global_key = "love"
  
  network.async(function
    
    global_meter = castle.storage.getGlobal('global_key')
    global_meter = global_meter or 0
    castle.storage.setGlobal('global_key', global_meter)
    
    server_keys = castle.storage.getGlobal('server_keys')
    local found = true
    server_key = rnd(1000000)
    
    while not found do
      found = false
      if server_keys[server_key] then 
        found = true 
        server_key = rnd(1000000)
      end
    end
    
    castle.storage.setGlobal('server_keys', server_keys)
    castle.storage.setGlobal(server_key, server_meter )
  end
  
  server_state = "alphaornot"
  
end


every 15 seconds : 

function update_meter()

  network.async(function
   
    castle.storage.setGlobal(server_key, server_meter)
    total = castle.storage.getGlobal(global_key)
    
    total = total + server_meter

  end

end

WAIT_TIME_SETCOUNT   = 4
WAIT_TIME_ALPHAORNOT = 4

function update_server()

  if server_state == "alphaornot" then
  
    if not doingalphaornot then
      network.async(function
        doingalphaornot = true
        alpha_server = castle.storage.getGlobal("alpha")
        
        if not alpha_server then 
          castle.storage.setGlobal(alpha_server, server_key)
        end
        
        server_state = "setcount"
        wait_time = WAIT_TIME_SETCOUNT
        doingalphaornot = false
      end
    end
    
  elseif server_state == "setcount" then
    wait_time = wait_time - dt()

    if wait_time < 0 then
    
      if not doingsetcount then
      network.async(function
        doingsetcount = true
        local old count = castle.storage.getGlobal(server_key)
        if old_count == 0 then        
          castle.storage.setGlobal(server_key, server_count)  
          old_server_count = server_count
          server_count = 0
        end
        
        global_count = castle.storage.getGlobal(global_key)
        
        alpha_server = castle.storage.getGlobal("alpha")
        
        if server_key == alpha_server then
          server_state = "iamthealpha"
          wait_time = 0
        else
          server_state = "alphaornot"
          wait_time = WAIT_TIME_ALPHAORNOT
        end
        
        doingsetcount = false
      end
    
    end
    
  elseif server_state == "iamthealpha" then
    
      if not doingiamthealpha then
      network.async(function
        doingiamthealpha = true
        
        server_keys = castle.storage.getGlobal('server_keys')
        
        for i, v in pairs(server_keys) do
        
          local count = castle.storage.getGlobal(v)          
          if count then
            global_count = global_count + count
            castle.storage.setGlobal(v, 0)
          end
          
        end
        
        castle.storage.setGlobal(last_updated_time, 0)
        
        server_state = "alphaornot"
        doingiamthealpha = false
      end)
      
  end



end



















